// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Stories.Models;
//
//    var story = Story.FromJson(jsonString);

namespace Stories.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Story
    {
        [JsonProperty("Id")]
        public long Id { get; set; }

        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("Author")]
        public string Author { get; set; }

        [JsonProperty("ImageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("Pages")]
        public List<Page> Pages { get; set; }
    }

    public partial class Page
    {
        [JsonProperty("Id")]
        public long Id { get; set; }

        [JsonProperty("StoryId")]
        public long StoryId { get; set; }

        [JsonProperty("PageNumber")]
        public long PageNumber { get; set; }

        [JsonProperty("Sequences")]
        public List<Sequence> Sequences { get; set; }
    }

    public partial class Sequence
    {
        [JsonProperty("Id")]
        public long Id { get; set; }

        [JsonProperty("SequenceId")]
        public long SequenceId { get; set; }

        [JsonProperty("Narrator")]
        public string Narrator { get; set; }

        [JsonProperty("Line")]
        public string Line { get; set; }
    }

    public partial class Story
    {
        public static List<Story> FromJson(string json) => JsonConvert.DeserializeObject<List<Story>>(json, Stories.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Story> self) => JsonConvert.SerializeObject(self, Stories.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
